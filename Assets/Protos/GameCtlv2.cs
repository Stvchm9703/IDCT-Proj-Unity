// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameCtlv2.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlayCli.ProtoMod {

  /// <summary>Holder for reflection information generated from GameCtlv2.proto</summary>
  public static partial class GameCtlv2Reflection {

    #region Descriptor
    /// <summary>File descriptor for GameCtlv2.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameCtlv2Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9HYW1lQ3RsdjIucHJvdG8SClJvb21TdGF0dXMaG2dvb2dsZS9wcm90b2J1",
            "Zi9lbXB0eS5wcm90byIuCghFcnJvck1zZxIQCghtc2dfaW5mbxgBIAEoCRIQ",
            "Cghtc2dfZGVzcBgCIAEoCSIiCgtSb29tTGlzdFJlcRITCgtyZXF1aXJlbWVu",
            "dBgBIAEoCSJsCgxSb29tTGlzdFJlc3ASEQoJdGltZXN0YW1wGAEgASgJEiAK",
            "BnJlc3VsdBgCIAMoCzIQLlJvb21TdGF0dXMuUm9vbRInCgllcnJvcl9tc2cY",
            "AyABKAsyFC5Sb29tU3RhdHVzLkVycm9yTXNnIiAKDVJvb21DcmVhdGVSZXES",
            "DwoHdXNlcl9pZBgBIAEoCSKoAQoOUm9vbUNyZWF0ZVJlc3ASDwoHdXNlcl9p",
            "ZBgBIAEoCRIRCgl0aW1lc3RhbXAYAiABKAkSDgoGc3RhdHVzGAMgASgFEicK",
            "C2NlbGxfc3RhdHVzGAQgASgLMhAuUm9vbVN0YXR1cy5Sb29tSAASKQoJZXJy",
            "b3JfbXNnGAUgASgLMhQuUm9vbVN0YXR1cy5FcnJvck1zZ0gAQg4KDHJlc3Bv",
            "bnNlX21zZyIWCgdSb29tUmVxEgsKA2tleRgBIAEoCSJ7CghSb29tUmVzcBIR",
            "Cgl0aW1lc3RhbXAYASABKAkSJQoJcm9vbV9pbmZvGAIgASgLMhAuUm9vbVN0",
            "YXR1cy5Sb29tSAASJQoFZXJyb3IYAyABKAsyFC5Sb29tU3RhdHVzLkVycm9y",
            "TXNnSABCDgoMcmVzcG9uc2VfbXNnIv8BCgRSb29tEgsKA2tleRgBIAEoCRIP",
            "Cgdob3N0X2lkGAIgASgJEhEKCWR1ZWxlcl9pZBgDIAEoCRInCgZzdGF0dXMY",
            "BCABKA4yFy5Sb29tU3RhdHVzLlJvb20uU3RhdHVzEg0KBXJvdW5kGAUgASgF",
            "EgwKBGNlbGwYBiABKAUSKwoLY2VsbF9zdGF0dXMYByADKAsyFi5Sb29tU3Rh",
            "dHVzLkNlbGxTdGF0dXMiUwoGU3RhdHVzEgwKCE9OX1NUQVJUEAASCwoHT05f",
            "V0FJVBABEhAKDE9OX0hPU1RfVFVSThACEhAKDE9OX0RVRUxfVFVSThADEgoK",
            "Bk9OX0VORBAEIjkKCkNlbGxTdGF0dXMSCwoDa2V5GAEgASgJEgwKBHR1cm4Y",
            "AiABKAUSEAoIY2VsbF9udW0YAyABKAUiewoNQ2VsbFN0YXR1c1JlcRIPCgd1",
            "c2VyX2lkGAEgASgJEgsKA2tleRgCIAEoCRITCglpc19wbGF5ZXIYAyABKAhI",
            "ABItCgtjZWxsX3N0YXR1cxgEIAEoCzIWLlJvb21TdGF0dXMuQ2VsbFN0YXR1",
            "c0gAQggKBnBsYXllciK7AQoOQ2VsbFN0YXR1c1Jlc3ASDwoHdXNlcl9pZBgB",
            "IAEoCRILCgNrZXkYAiABKAkSEQoJdGltZXN0YW1wGAMgASgJEg4KBnN0YXR1",
            "cxgEIAEoBRItCgtjZWxsX3N0YXR1cxgFIAEoCzIWLlJvb21TdGF0dXMuQ2Vs",
            "bFN0YXR1c0gAEikKCWVycm9yX21zZxgGIAEoCzIULlJvb21TdGF0dXMuRXJy",
            "b3JNc2dIAEIOCgxyZXNwb25zZV9tc2ciPwoNQ3JlYXRlQ3JlZFJlcRIKCgJJ",
            "cBgBIAEoCRIQCghVc2VybmFtZRgCIAEoCRIQCghQYXNzd29yZBgDIAEoCSIU",
            "CgRDcmVkEgwKBGZpbGUYASABKAkypwQKClJvb21TdGF0dXMSPwoKQ3JlYXRl",
            "Um9vbRIZLlJvb21TdGF0dXMuUm9vbUNyZWF0ZVJlcRoULlJvb21TdGF0dXMu",
            "Um9vbVJlc3AiABJCCgtHZXRSb29tTGlzdBIXLlJvb21TdGF0dXMuUm9vbUxp",
            "c3RSZXEaGC5Sb29tU3RhdHVzLlJvb21MaXN0UmVzcCIAEjoKC0dldFJvb21J",
            "bmZvEhMuUm9vbVN0YXR1cy5Sb29tUmVxGhQuUm9vbVN0YXR1cy5Sb29tUmVz",
            "cCIAEjkKCkRlbGV0ZVJvb20SEy5Sb29tU3RhdHVzLlJvb21SZXEaFC5Sb29t",
            "U3RhdHVzLlJvb21SZXNwIgASSQoKUm9vbVN0cmVhbRIZLlJvb21TdGF0dXMu",
            "Q2VsbFN0YXR1c1JlcRoaLlJvb21TdGF0dXMuQ2VsbFN0YXR1c1Jlc3AiACgB",
            "MAESSgoNR2V0Um9vbVN0cmVhbRIZLlJvb21TdGF0dXMuQ2VsbFN0YXR1c1Jl",
            "cRoaLlJvb21TdGF0dXMuQ2VsbFN0YXR1c1Jlc3AiADABEkUKClVwZGF0ZVJv",
            "b20SGS5Sb29tU3RhdHVzLkNlbGxTdGF0dXNSZXEaGi5Sb29tU3RhdHVzLkNl",
            "bGxTdGF0dXNSZXNwIgASPwoIUXVpdFJvb20SGS5Sb29tU3RhdHVzLlJvb21D",
            "cmVhdGVSZXEaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiADJMCgtDcmVkaXRz",
            "QXV0aBI9CgpDcmVhdGVDcmVkEhkuUm9vbVN0YXR1cy5DcmVhdGVDcmVkUmVx",
            "GhAuUm9vbVN0YXR1cy5DcmVkIgAwAUITqgIQUGxheUNsaS5Qcm90b01vZGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.ErrorMsg), global::PlayCli.ProtoMod.ErrorMsg.Parser, new[]{ "MsgInfo", "MsgDesp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomListReq), global::PlayCli.ProtoMod.RoomListReq.Parser, new[]{ "Requirement" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomListResp), global::PlayCli.ProtoMod.RoomListResp.Parser, new[]{ "Timestamp", "Result", "ErrorMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomCreateReq), global::PlayCli.ProtoMod.RoomCreateReq.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomCreateResp), global::PlayCli.ProtoMod.RoomCreateResp.Parser, new[]{ "UserId", "Timestamp", "Status", "CellStatus", "ErrorMsg" }, new[]{ "ResponseMsg" },  null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomReq), global::PlayCli.ProtoMod.RoomReq.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomResp), global::PlayCli.ProtoMod.RoomResp.Parser, new[]{ "Timestamp", "RoomInfo", "Error" }, new[]{ "ResponseMsg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.Room), global::PlayCli.ProtoMod.Room.Parser, new[]{ "Key", "HostId", "DuelerId", "Status", "Round", "Cell", "CellStatus" }, null, new[]{ typeof(global::PlayCli.ProtoMod.Room.Types.Status) },  null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.CellStatus), global::PlayCli.ProtoMod.CellStatus.Parser, new[]{ "Key", "Turn", "CellNum" }, null,null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.CellStatusReq), global::PlayCli.ProtoMod.CellStatusReq.Parser, new[]{ "UserId", "Key", "IsPlayer", "CellStatus" }, new[]{ "Player" }, null,  null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.CellStatusResp), global::PlayCli.ProtoMod.CellStatusResp.Parser, new[]{ "UserId", "Key", "Timestamp", "Status", "CellStatus", "ErrorMsg" }, new[]{ "ResponseMsg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.CreateCredReq), global::PlayCli.ProtoMod.CreateCredReq.Parser, new[]{ "Ip", "Username", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.Cred), global::PlayCli.ProtoMod.Cred.Parser, new[]{ "File" },  null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ErrorMsg : pb::IMessage<ErrorMsg> {
    private static readonly pb::MessageParser<ErrorMsg> _parser = new pb::MessageParser<ErrorMsg>(() => new ErrorMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg(ErrorMsg other) : this() {
      msgInfo_ = other.msgInfo_;
      msgDesp_ = other.msgDesp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorMsg Clone() {
      return new ErrorMsg(this);
    }

    /// <summary>Field number for the "msg_info" field.</summary>
    public const int MsgInfoFieldNumber = 1;
    private string msgInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgInfo {
      get { return msgInfo_; }
      set {
        msgInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "msg_desp" field.</summary>
    public const int MsgDespFieldNumber = 2;
    private string msgDesp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgDesp {
      get { return msgDesp_; }
      set {
        msgDesp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MsgInfo != other.MsgInfo) return false;
      if (MsgDesp != other.MsgDesp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MsgInfo.Length != 0) hash ^= MsgInfo.GetHashCode();
      if (MsgDesp.Length != 0) hash ^= MsgDesp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MsgInfo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MsgInfo);
      }
      if (MsgDesp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MsgDesp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MsgInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgInfo);
      }
      if (MsgDesp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgDesp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorMsg other) {
      if (other == null) {
        return;
      }
      if (other.MsgInfo.Length != 0) {
        MsgInfo = other.MsgInfo;
      }
      if (other.MsgDesp.Length != 0) {
        MsgDesp = other.MsgDesp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MsgInfo = input.ReadString();
            break;
          }
          case 18: {
            MsgDesp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomListReq : pb::IMessage<RoomListReq> {
    private static readonly pb::MessageParser<RoomListReq> _parser = new pb::MessageParser<RoomListReq>(() => new RoomListReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListReq(RoomListReq other) : this() {
      requirement_ = other.requirement_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListReq Clone() {
      return new RoomListReq(this);
    }

    /// <summary>Field number for the "requirement" field.</summary>
    public const int RequirementFieldNumber = 1;
    private string requirement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requirement {
      get { return requirement_; }
      set {
        requirement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requirement != other.Requirement) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requirement.Length != 0) hash ^= Requirement.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requirement.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requirement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requirement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requirement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListReq other) {
      if (other == null) {
        return;
      }
      if (other.Requirement.Length != 0) {
        Requirement = other.Requirement;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requirement = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomListResp : pb::IMessage<RoomListResp> {
    private static readonly pb::MessageParser<RoomListResp> _parser = new pb::MessageParser<RoomListResp>(() => new RoomListResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResp(RoomListResp other) : this() {
      timestamp_ = other.timestamp_;
      result_ = other.result_.Clone();
      errorMsg_ = other.errorMsg_ != null ? other.errorMsg_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResp Clone() {
      return new RoomListResp(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PlayCli.ProtoMod.Room> _repeated_result_codec
        = pb::FieldCodec.ForMessage(18, global::PlayCli.ProtoMod.Room.Parser);
    private readonly pbc::RepeatedField<global::PlayCli.ProtoMod.Room> result_ = new pbc::RepeatedField<global::PlayCli.ProtoMod.Room>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlayCli.ProtoMod.Room> Result {
      get { return result_; }
    }

    /// <summary>Field number for the "error_msg" field.</summary>
    public const int ErrorMsgFieldNumber = 3;
    private global::PlayCli.ProtoMod.ErrorMsg errorMsg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.ErrorMsg ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if(!result_.Equals(other.result_)) return false;
      if (!object.Equals(ErrorMsg, other.ErrorMsg)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      hash ^= result_.GetHashCode();
      if (errorMsg_ != null) hash ^= ErrorMsg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Timestamp);
      }
      result_.WriteTo(output, _repeated_result_codec);
      if (errorMsg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ErrorMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      size += result_.CalculateSize(_repeated_result_codec);
      if (errorMsg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListResp other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      result_.Add(other.result_);
      if (other.errorMsg_ != null) {
        if (errorMsg_ == null) {
          ErrorMsg = new global::PlayCli.ProtoMod.ErrorMsg();
        }
        ErrorMsg.MergeFrom(other.ErrorMsg);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Timestamp = input.ReadString();
            break;
          }
          case 18: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
          case 26: {
            if (errorMsg_ == null) {
              ErrorMsg = new global::PlayCli.ProtoMod.ErrorMsg();
            }
            input.ReadMessage(ErrorMsg);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomCreateReq : pb::IMessage<RoomCreateReq> {
    private static readonly pb::MessageParser<RoomCreateReq> _parser = new pb::MessageParser<RoomCreateReq>(() => new RoomCreateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateReq(RoomCreateReq other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateReq Clone() {
      return new RoomCreateReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomCreateResp : pb::IMessage<RoomCreateResp> {
    private static readonly pb::MessageParser<RoomCreateResp> _parser = new pb::MessageParser<RoomCreateResp>(() => new RoomCreateResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreateResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateResp(RoomCreateResp other) : this() {
      userId_ = other.userId_;
      timestamp_ = other.timestamp_;
      status_ = other.status_;
      switch (other.ResponseMsgCase) {
        case ResponseMsgOneofCase.CellStatus:
          CellStatus = other.CellStatus.Clone();
          break;
        case ResponseMsgOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateResp Clone() {
      return new RoomCreateResp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cell_status" field.</summary>
    public const int CellStatusFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.Room CellStatus {
      get { return responseMsgCase_ == ResponseMsgOneofCase.CellStatus ? (global::PlayCli.ProtoMod.Room) responseMsg_ : null; }
      set {
        responseMsg_ = value;
        responseMsgCase_ = value == null ? ResponseMsgOneofCase.None : ResponseMsgOneofCase.CellStatus;
      }
    }

    /// <summary>Field number for the "error_msg" field.</summary>
    public const int ErrorMsgFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.ErrorMsg ErrorMsg {
      get { return responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg ? (global::PlayCli.ProtoMod.ErrorMsg) responseMsg_ : null; }
      set {
        responseMsg_ = value;
        responseMsgCase_ = value == null ? ResponseMsgOneofCase.None : ResponseMsgOneofCase.ErrorMsg;
      }
    }

    private object responseMsg_;
    /// <summary>Enum of possible cases for the "response_msg" oneof.</summary>
    public enum ResponseMsgOneofCase {
      None = 0,
      CellStatus = 4,
      ErrorMsg = 5,
    }
    private ResponseMsgOneofCase responseMsgCase_ = ResponseMsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMsgOneofCase ResponseMsgCase {
      get { return responseMsgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseMsg() {
      responseMsgCase_ = ResponseMsgOneofCase.None;
      responseMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomCreateResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomCreateResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(CellStatus, other.CellStatus)) return false;
      if (!object.Equals(ErrorMsg, other.ErrorMsg)) return false;
      if (ResponseMsgCase != other.ResponseMsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) hash ^= CellStatus.GetHashCode();
      if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) hash ^= ErrorMsg.GetHashCode();
      hash ^= (int) responseMsgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Timestamp);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Status);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) {
        output.WriteRawTag(34);
        output.WriteMessage(CellStatus);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) {
        output.WriteRawTag(42);
        output.WriteMessage(ErrorMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CellStatus);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomCreateResp other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      switch (other.ResponseMsgCase) {
        case ResponseMsgOneofCase.CellStatus:
          if (CellStatus == null) {
            CellStatus = new global::PlayCli.ProtoMod.Room();
          }
          CellStatus.MergeFrom(other.CellStatus);
          break;
        case ResponseMsgOneofCase.ErrorMsg:
          if (ErrorMsg == null) {
            ErrorMsg = new global::PlayCli.ProtoMod.ErrorMsg();
          }
          ErrorMsg.MergeFrom(other.ErrorMsg);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Timestamp = input.ReadString();
            break;
          }
          case 24: {
            Status = input.ReadInt32();
            break;
          }
          case 34: {
            global::PlayCli.ProtoMod.Room subBuilder = new global::PlayCli.ProtoMod.Room();
            if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) {
              subBuilder.MergeFrom(CellStatus);
            }
            input.ReadMessage(subBuilder);
            CellStatus = subBuilder;
            break;
          }
          case 42: {
            global::PlayCli.ProtoMod.ErrorMsg subBuilder = new global::PlayCli.ProtoMod.ErrorMsg();
            if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) {
              subBuilder.MergeFrom(ErrorMsg);
            }
            input.ReadMessage(subBuilder);
            ErrorMsg = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomReq : pb::IMessage<RoomReq> {
    private static readonly pb::MessageParser<RoomReq> _parser = new pb::MessageParser<RoomReq>(() => new RoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReq(RoomReq other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomReq Clone() {
      return new RoomReq(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomReq other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomResp : pb::IMessage<RoomResp> {
    private static readonly pb::MessageParser<RoomResp> _parser = new pb::MessageParser<RoomResp>(() => new RoomResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomResp(RoomResp other) : this() {
      timestamp_ = other.timestamp_;
      switch (other.ResponseMsgCase) {
        case ResponseMsgOneofCase.RoomInfo:
          RoomInfo = other.RoomInfo.Clone();
          break;
        case ResponseMsgOneofCase.Error:
          Error = other.Error.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomResp Clone() {
      return new RoomResp(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room_info" field.</summary>
    public const int RoomInfoFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.Room RoomInfo {
      get { return responseMsgCase_ == ResponseMsgOneofCase.RoomInfo ? (global::PlayCli.ProtoMod.Room) responseMsg_ : null; }
      set {
        responseMsg_ = value;
        responseMsgCase_ = value == null ? ResponseMsgOneofCase.None : ResponseMsgOneofCase.RoomInfo;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.ErrorMsg Error {
      get { return responseMsgCase_ == ResponseMsgOneofCase.Error ? (global::PlayCli.ProtoMod.ErrorMsg) responseMsg_ : null; }
      set {
        responseMsg_ = value;
        responseMsgCase_ = value == null ? ResponseMsgOneofCase.None : ResponseMsgOneofCase.Error;
      }
    }

    private object responseMsg_;
    /// <summary>Enum of possible cases for the "response_msg" oneof.</summary>
    public enum ResponseMsgOneofCase {
      None = 0,
      RoomInfo = 2,
      Error = 3,
    }
    private ResponseMsgOneofCase responseMsgCase_ = ResponseMsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMsgOneofCase ResponseMsgCase {
      get { return responseMsgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseMsg() {
      responseMsgCase_ = ResponseMsgOneofCase.None;
      responseMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (ResponseMsgCase != other.ResponseMsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (responseMsgCase_ == ResponseMsgOneofCase.RoomInfo) hash ^= RoomInfo.GetHashCode();
      if (responseMsgCase_ == ResponseMsgOneofCase.Error) hash ^= Error.GetHashCode();
      hash ^= (int) responseMsgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Timestamp);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.RoomInfo) {
        output.WriteRawTag(18);
        output.WriteMessage(RoomInfo);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.Error) {
        output.WriteRawTag(26);
        output.WriteMessage(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.RoomInfo) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomResp other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      switch (other.ResponseMsgCase) {
        case ResponseMsgOneofCase.RoomInfo:
          if (RoomInfo == null) {
            RoomInfo = new global::PlayCli.ProtoMod.Room();
          }
          RoomInfo.MergeFrom(other.RoomInfo);
          break;
        case ResponseMsgOneofCase.Error:
          if (Error == null) {
            Error = new global::PlayCli.ProtoMod.ErrorMsg();
          }
          Error.MergeFrom(other.Error);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Timestamp = input.ReadString();
            break;
          }
          case 18: {
            global::PlayCli.ProtoMod.Room subBuilder = new global::PlayCli.ProtoMod.Room();
            if (responseMsgCase_ == ResponseMsgOneofCase.RoomInfo) {
              subBuilder.MergeFrom(RoomInfo);
            }
            input.ReadMessage(subBuilder);
            RoomInfo = subBuilder;
            break;
          }
          case 26: {
            global::PlayCli.ProtoMod.ErrorMsg subBuilder = new global::PlayCli.ProtoMod.ErrorMsg();
            if (responseMsgCase_ == ResponseMsgOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      key_ = other.key_;
      hostId_ = other.hostId_;
      duelerId_ = other.duelerId_;
      status_ = other.status_;
      round_ = other.round_;
      cell_ = other.cell_;
      cellStatus_ = other.cellStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_id" field.</summary>
    public const int HostIdFieldNumber = 2;
    private string hostId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostId {
      get { return hostId_; }
      set {
        hostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dueler_id" field.</summary>
    public const int DuelerIdFieldNumber = 3;
    private string duelerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DuelerId {
      get { return duelerId_; }
      set {
        duelerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::PlayCli.ProtoMod.Room.Types.Status status_ = global::PlayCli.ProtoMod.Room.Types.Status.OnStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.Room.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 5;
    private int round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "cell" field.</summary>
    public const int CellFieldNumber = 6;
    private int cell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cell {
      get { return cell_; }
      set {
        cell_ = value;
      }
    }

    /// <summary>Field number for the "cell_status" field.</summary>
    public const int CellStatusFieldNumber = 7;
    private static readonly pb::FieldCodec<global::PlayCli.ProtoMod.CellStatus> _repeated_cellStatus_codec
        = pb::FieldCodec.ForMessage(58, global::PlayCli.ProtoMod.CellStatus.Parser);
    private readonly pbc::RepeatedField<global::PlayCli.ProtoMod.CellStatus> cellStatus_ = new pbc::RepeatedField<global::PlayCli.ProtoMod.CellStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlayCli.ProtoMod.CellStatus> CellStatus {
      get { return cellStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (HostId != other.HostId) return false;
      if (DuelerId != other.DuelerId) return false;
      if (Status != other.Status) return false;
      if (Round != other.Round) return false;
      if (Cell != other.Cell) return false;
      if(!cellStatus_.Equals(other.cellStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (HostId.Length != 0) hash ^= HostId.GetHashCode();
      if (DuelerId.Length != 0) hash ^= DuelerId.GetHashCode();
      if (Status != global::PlayCli.ProtoMod.Room.Types.Status.OnStart) hash ^= Status.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (Cell != 0) hash ^= Cell.GetHashCode();
      hash ^= cellStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HostId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostId);
      }
      if (DuelerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DuelerId);
      }
      if (Status != global::PlayCli.ProtoMod.Room.Types.Status.OnStart) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Round != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Round);
      }
      if (Cell != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Cell);
      }
      cellStatus_.WriteTo(output, _repeated_cellStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostId);
      }
      if (DuelerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DuelerId);
      }
      if (Status != global::PlayCli.ProtoMod.Room.Types.Status.OnStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Cell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cell);
      }
      size += cellStatus_.CalculateSize(_repeated_cellStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.HostId.Length != 0) {
        HostId = other.HostId;
      }
      if (other.DuelerId.Length != 0) {
        DuelerId = other.DuelerId;
      }
      if (other.Status != global::PlayCli.ProtoMod.Room.Types.Status.OnStart) {
        Status = other.Status;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.Cell != 0) {
        Cell = other.Cell;
      }
      cellStatus_.Add(other.cellStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            HostId = input.ReadString();
            break;
          }
          case 26: {
            DuelerId = input.ReadString();
            break;
          }
          case 32: {
            Status = (global::PlayCli.ProtoMod.Room.Types.Status) input.ReadEnum();
            break;
          }
          case 40: {
            Round = input.ReadInt32();
            break;
          }
          case 48: {
            Cell = input.ReadInt32();
            break;
          }
          case 58: {
            cellStatus_.AddEntriesFrom(input, _repeated_cellStatus_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Room message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("ON_START")] OnStart = 0,
        [pbr::OriginalName("ON_WAIT")] OnWait = 1,
        [pbr::OriginalName("ON_HOST_TURN")] OnHostTurn = 2,
        [pbr::OriginalName("ON_DUEL_TURN")] OnDuelTurn = 3,
        [pbr::OriginalName("ON_END")] OnEnd = 4,
      }

    }
    #endregion

  }

  public sealed partial class CellStatus : pb::IMessage<CellStatus> {
    private static readonly pb::MessageParser<CellStatus> _parser = new pb::MessageParser<CellStatus>(() => new CellStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatus(CellStatus other) : this() {
      key_ = other.key_;
      turn_ = other.turn_;
      cellNum_ = other.cellNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatus Clone() {
      return new CellStatus(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turn" field.</summary>
    public const int TurnFieldNumber = 2;
    private int turn_;
    /// <summary>
    /// turn 1 = host / -1 = duel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turn {
      get { return turn_; }
      set {
        turn_ = value;
      }
    }

    /// <summary>Field number for the "cell_num" field.</summary>
    public const int CellNumFieldNumber = 3;
    private int cellNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellNum {
      get { return cellNum_; }
      set {
        cellNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Turn != other.Turn) return false;
      if (CellNum != other.CellNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Turn != 0) hash ^= Turn.GetHashCode();
      if (CellNum != 0) hash ^= CellNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Turn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Turn);
      }
      if (CellNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CellNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Turn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turn);
      }
      if (CellNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellStatus other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Turn != 0) {
        Turn = other.Turn;
      }
      if (other.CellNum != 0) {
        CellNum = other.CellNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Turn = input.ReadInt32();
            break;
          }
          case 24: {
            CellNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellStatusReq : pb::IMessage<CellStatusReq> {
    private static readonly pb::MessageParser<CellStatusReq> _parser = new pb::MessageParser<CellStatusReq>(() => new CellStatusReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellStatusReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatusReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatusReq(CellStatusReq other) : this() {
      userId_ = other.userId_;
      key_ = other.key_;
      switch (other.PlayerCase) {
        case PlayerOneofCase.IsPlayer:
          IsPlayer = other.IsPlayer;
          break;
        case PlayerOneofCase.CellStatus:
          CellStatus = other.CellStatus.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatusReq Clone() {
      return new CellStatusReq(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_player" field.</summary>
    public const int IsPlayerFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlayer {
      get { return playerCase_ == PlayerOneofCase.IsPlayer ? (bool) player_ : false; }
      set {
        player_ = value;
        playerCase_ = PlayerOneofCase.IsPlayer;
      }
    }

    /// <summary>Field number for the "cell_status" field.</summary>
    public const int CellStatusFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.CellStatus CellStatus {
      get { return playerCase_ == PlayerOneofCase.CellStatus ? (global::PlayCli.ProtoMod.CellStatus) player_ : null; }
      set {
        player_ = value;
        playerCase_ = value == null ? PlayerOneofCase.None : PlayerOneofCase.CellStatus;
      }
    }

    private object player_;
    /// <summary>Enum of possible cases for the "player" oneof.</summary>
    public enum PlayerOneofCase {
      None = 0,
      IsPlayer = 3,
      CellStatus = 4,
    }
    private PlayerOneofCase playerCase_ = PlayerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOneofCase PlayerCase {
      get { return playerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlayer() {
      playerCase_ = PlayerOneofCase.None;
      player_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellStatusReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellStatusReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Key != other.Key) return false;
      if (IsPlayer != other.IsPlayer) return false;
      if (!object.Equals(CellStatus, other.CellStatus)) return false;
      if (PlayerCase != other.PlayerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (playerCase_ == PlayerOneofCase.IsPlayer) hash ^= IsPlayer.GetHashCode();
      if (playerCase_ == PlayerOneofCase.CellStatus) hash ^= CellStatus.GetHashCode();
      hash ^= (int) playerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (playerCase_ == PlayerOneofCase.IsPlayer) {
        output.WriteRawTag(24);
        output.WriteBool(IsPlayer);
      }
      if (playerCase_ == PlayerOneofCase.CellStatus) {
        output.WriteRawTag(34);
        output.WriteMessage(CellStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (playerCase_ == PlayerOneofCase.IsPlayer) {
        size += 1 + 1;
      }
      if (playerCase_ == PlayerOneofCase.CellStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CellStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellStatusReq other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      switch (other.PlayerCase) {
        case PlayerOneofCase.IsPlayer:
          IsPlayer = other.IsPlayer;
          break;
        case PlayerOneofCase.CellStatus:
          if (CellStatus == null) {
            CellStatus = new global::PlayCli.ProtoMod.CellStatus();
          }
          CellStatus.MergeFrom(other.CellStatus);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 24: {
            IsPlayer = input.ReadBool();
            break;
          }
          case 34: {
            global::PlayCli.ProtoMod.CellStatus subBuilder = new global::PlayCli.ProtoMod.CellStatus();
            if (playerCase_ == PlayerOneofCase.CellStatus) {
              subBuilder.MergeFrom(CellStatus);
            }
            input.ReadMessage(subBuilder);
            CellStatus = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellStatusResp : pb::IMessage<CellStatusResp> {
    private static readonly pb::MessageParser<CellStatusResp> _parser = new pb::MessageParser<CellStatusResp>(() => new CellStatusResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellStatusResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatusResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatusResp(CellStatusResp other) : this() {
      userId_ = other.userId_;
      key_ = other.key_;
      timestamp_ = other.timestamp_;
      status_ = other.status_;
      switch (other.ResponseMsgCase) {
        case ResponseMsgOneofCase.CellStatus:
          CellStatus = other.CellStatus.Clone();
          break;
        case ResponseMsgOneofCase.ErrorMsg:
          ErrorMsg = other.ErrorMsg.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatusResp Clone() {
      return new CellStatusResp(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cell_status" field.</summary>
    public const int CellStatusFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.CellStatus CellStatus {
      get { return responseMsgCase_ == ResponseMsgOneofCase.CellStatus ? (global::PlayCli.ProtoMod.CellStatus) responseMsg_ : null; }
      set {
        responseMsg_ = value;
        responseMsgCase_ = value == null ? ResponseMsgOneofCase.None : ResponseMsgOneofCase.CellStatus;
      }
    }

    /// <summary>Field number for the "error_msg" field.</summary>
    public const int ErrorMsgFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.ErrorMsg ErrorMsg {
      get { return responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg ? (global::PlayCli.ProtoMod.ErrorMsg) responseMsg_ : null; }
      set {
        responseMsg_ = value;
        responseMsgCase_ = value == null ? ResponseMsgOneofCase.None : ResponseMsgOneofCase.ErrorMsg;
      }
    }

    private object responseMsg_;
    /// <summary>Enum of possible cases for the "response_msg" oneof.</summary>
    public enum ResponseMsgOneofCase {
      None = 0,
      CellStatus = 5,
      ErrorMsg = 6,
    }
    private ResponseMsgOneofCase responseMsgCase_ = ResponseMsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMsgOneofCase ResponseMsgCase {
      get { return responseMsgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponseMsg() {
      responseMsgCase_ = ResponseMsgOneofCase.None;
      responseMsg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellStatusResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellStatusResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Key != other.Key) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(CellStatus, other.CellStatus)) return false;
      if (!object.Equals(ErrorMsg, other.ErrorMsg)) return false;
      if (ResponseMsgCase != other.ResponseMsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) hash ^= CellStatus.GetHashCode();
      if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) hash ^= ErrorMsg.GetHashCode();
      hash ^= (int) responseMsgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Key);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Timestamp);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) {
        output.WriteRawTag(42);
        output.WriteMessage(CellStatus);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) {
        output.WriteRawTag(50);
        output.WriteMessage(ErrorMsg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CellStatus);
      }
      if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ErrorMsg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellStatusResp other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      switch (other.ResponseMsgCase) {
        case ResponseMsgOneofCase.CellStatus:
          if (CellStatus == null) {
            CellStatus = new global::PlayCli.ProtoMod.CellStatus();
          }
          CellStatus.MergeFrom(other.CellStatus);
          break;
        case ResponseMsgOneofCase.ErrorMsg:
          if (ErrorMsg == null) {
            ErrorMsg = new global::PlayCli.ProtoMod.ErrorMsg();
          }
          ErrorMsg.MergeFrom(other.ErrorMsg);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Key = input.ReadString();
            break;
          }
          case 26: {
            Timestamp = input.ReadString();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 42: {
            global::PlayCli.ProtoMod.CellStatus subBuilder = new global::PlayCli.ProtoMod.CellStatus();
            if (responseMsgCase_ == ResponseMsgOneofCase.CellStatus) {
              subBuilder.MergeFrom(CellStatus);
            }
            input.ReadMessage(subBuilder);
            CellStatus = subBuilder;
            break;
          }
          case 50: {
            global::PlayCli.ProtoMod.ErrorMsg subBuilder = new global::PlayCli.ProtoMod.ErrorMsg();
            if (responseMsgCase_ == ResponseMsgOneofCase.ErrorMsg) {
              subBuilder.MergeFrom(ErrorMsg);
            }
            input.ReadMessage(subBuilder);
            ErrorMsg = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateCredReq : pb::IMessage<CreateCredReq> {
    private static readonly pb::MessageParser<CreateCredReq> _parser = new pb::MessageParser<CreateCredReq>(() => new CreateCredReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCredReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCredReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCredReq(CreateCredReq other) : this() {
      ip_ = other.ip_;
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCredReq Clone() {
      return new CreateCredReq(this);
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCredReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCredReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCredReq other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cred : pb::IMessage<Cred> {
    private static readonly pb::MessageParser<Cred> _parser = new pb::MessageParser<Cred>(() => new Cred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlv2Reflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cred(Cred other) : this() {
      file_ = other.file_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cred Clone() {
      return new Cred(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cred other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
