// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameCtl.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PlayCli.ProtoMod {

  /// <summary>Holder for reflection information generated from GameCtl.proto</summary>
  public static partial class GameCtlReflection {

    #region Descriptor
    /// <summary>File descriptor for GameCtl.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameCtlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1HYW1lQ3RsLnByb3RvEgpSb29tU3RhdHVzGhtnb29nbGUvcHJvdG9idWYv",
            "ZW1wdHkucHJvdG8iJgoPUm9vbUxpc3RSZXF1ZXN0EhMKC3JlcXVpcmVtZW50",
            "GAEgASgJIjQKEFJvb21MaXN0UmVzcG9uc2USIAoGcmVzdWx0GAEgAygLMhAu",
            "Um9vbVN0YXR1cy5Sb29tIiMKEVJvb21DcmVhdGVSZXF1ZXN0Eg4KBkhvc3RJ",
            "ZBgBIAEoCSIaCgtSb29tUmVxdWVzdBILCgNrZXkYASABKAkipQEKBFJvb20S",
            "CwoDa2V5GAEgASgJEg8KB2hvc3RfaWQYAiABKAkSEQoJZHVlbGVyX2lkGAMg",
            "ASgJEiIKBnN0YXR1cxgEIAEoDjISLlJvb21TdGF0dXMuU3RhdHVzEg0KBXJv",
            "dW5kGAUgASgFEgwKBGNlbGwYBiABKAUSKwoLY2VsbF9zdGF0dXMYByADKAsy",
            "Fi5Sb29tU3RhdHVzLkNlbGxTdGF0dXMiOQoKQ2VsbFN0YXR1cxILCgNrZXkY",
            "ASABKAkSDAoEdHVybhgCIAEoBRIQCghjZWxsX251bRgDIAEoBSI/Cg1DcmVh",
            "dGVDcmVkUmVxEgoKAklwGAEgASgJEhAKCFVzZXJuYW1lGAIgASgJEhAKCFBh",
            "c3N3b3JkGAMgASgJIhQKBENyZWQSDAoEZmlsZRgBIAEoCSpTCgZTdGF0dXMS",
            "DAoIT05fU1RBUlQQABILCgdPTl9XQUlUEAESEAoMT05fSE9TVF9UVVJOEAIS",
            "EAoMT05fRFVFTF9UVVJOEAMSCgoGT05fRU5EEAQy1gIKClJvb21TdGF0dXMS",
            "PwoKQ3JlYXRlUm9vbRIdLlJvb21TdGF0dXMuUm9vbUNyZWF0ZVJlcXVlc3Qa",
            "EC5Sb29tU3RhdHVzLlJvb20iABJKCgtHZXRSb29tTGlzdBIbLlJvb21TdGF0",
            "dXMuUm9vbUxpc3RSZXF1ZXN0GhwuUm9vbVN0YXR1cy5Sb29tTGlzdFJlc3Bv",
            "bnNlIgASOgoLR2V0Um9vbUluZm8SFy5Sb29tU3RhdHVzLlJvb21SZXF1ZXN0",
            "GhAuUm9vbVN0YXR1cy5Sb29tIgASPwoKRGVsZXRlUm9vbRIXLlJvb21TdGF0",
            "dXMuUm9vbVJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI+CgpV",
            "cGRhdGVSb29tEhYuUm9vbVN0YXR1cy5DZWxsU3RhdHVzGhYuUm9vbVN0YXR1",
            "cy5DZWxsU3RhdHVzIgAyTAoLQ3JlZGl0c0F1dGgSPQoKQ3JlYXRlQ3JlZBIZ",
            "LlJvb21TdGF0dXMuQ3JlYXRlQ3JlZFJlcRoQLlJvb21TdGF0dXMuQ3JlZCIA",
            "MAFCGloFcHJvdG+qAhBQbGF5Q2xpLlByb3RvTW9kYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::PlayCli.ProtoMod.Status), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomListRequest), global::PlayCli.ProtoMod.RoomListRequest.Parser, new[]{ "Requirement" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomListResponse), global::PlayCli.ProtoMod.RoomListResponse.Parser, new[]{ "Result" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomCreateRequest), global::PlayCli.ProtoMod.RoomCreateRequest.Parser, new[]{ "HostId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.RoomRequest), global::PlayCli.ProtoMod.RoomRequest.Parser, new[]{ "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.Room), global::PlayCli.ProtoMod.Room.Parser, new[]{ "Key", "HostId", "DuelerId", "Status", "Round", "Cell", "CellStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.CellStatus), global::PlayCli.ProtoMod.CellStatus.Parser, new[]{ "Key", "Turn", "CellNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.CreateCredReq), global::PlayCli.ProtoMod.CreateCredReq.Parser, new[]{ "Ip", "Username", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PlayCli.ProtoMod.Cred), global::PlayCli.ProtoMod.Cred.Parser, new[]{ "File" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Status {
    [pbr::OriginalName("ON_START")] OnStart = 0,
    [pbr::OriginalName("ON_WAIT")] OnWait = 1,
    [pbr::OriginalName("ON_HOST_TURN")] OnHostTurn = 2,
    [pbr::OriginalName("ON_DUEL_TURN")] OnDuelTurn = 3,
    [pbr::OriginalName("ON_END")] OnEnd = 4,
  }

  #endregion

  #region Messages
  public sealed partial class RoomListRequest : pb::IMessage<RoomListRequest> {
    private static readonly pb::MessageParser<RoomListRequest> _parser = new pb::MessageParser<RoomListRequest>(() => new RoomListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest(RoomListRequest other) : this() {
      requirement_ = other.requirement_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListRequest Clone() {
      return new RoomListRequest(this);
    }

    /// <summary>Field number for the "requirement" field.</summary>
    public const int RequirementFieldNumber = 1;
    private string requirement_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Requirement {
      get { return requirement_; }
      set {
        requirement_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Requirement != other.Requirement) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Requirement.Length != 0) hash ^= Requirement.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Requirement.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Requirement);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Requirement.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Requirement);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListRequest other) {
      if (other == null) {
        return;
      }
      if (other.Requirement.Length != 0) {
        Requirement = other.Requirement;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Requirement = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomListResponse : pb::IMessage<RoomListResponse> {
    private static readonly pb::MessageParser<RoomListResponse> _parser = new pb::MessageParser<RoomListResponse>(() => new RoomListResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse(RoomListResponse other) : this() {
      result_ = other.result_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomListResponse Clone() {
      return new RoomListResponse(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PlayCli.ProtoMod.Room> _repeated_result_codec
        = pb::FieldCodec.ForMessage(10, global::PlayCli.ProtoMod.Room.Parser);
    private readonly pbc::RepeatedField<global::PlayCli.ProtoMod.Room> result_ = new pbc::RepeatedField<global::PlayCli.ProtoMod.Room>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlayCli.ProtoMod.Room> Result {
      get { return result_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!result_.Equals(other.result_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= result_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      result_.WriteTo(output, _repeated_result_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += result_.CalculateSize(_repeated_result_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomListResponse other) {
      if (other == null) {
        return;
      }
      result_.Add(other.result_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            result_.AddEntriesFrom(input, _repeated_result_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomCreateRequest : pb::IMessage<RoomCreateRequest> {
    private static readonly pb::MessageParser<RoomCreateRequest> _parser = new pb::MessageParser<RoomCreateRequest>(() => new RoomCreateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomCreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateRequest(RoomCreateRequest other) : this() {
      hostId_ = other.hostId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomCreateRequest Clone() {
      return new RoomCreateRequest(this);
    }

    /// <summary>Field number for the "HostId" field.</summary>
    public const int HostIdFieldNumber = 1;
    private string hostId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostId {
      get { return hostId_; }
      set {
        hostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomCreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomCreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HostId != other.HostId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HostId.Length != 0) hash ^= HostId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HostId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HostId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomCreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.HostId.Length != 0) {
        HostId = other.HostId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            HostId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomRequest : pb::IMessage<RoomRequest> {
    private static readonly pb::MessageParser<RoomRequest> _parser = new pb::MessageParser<RoomRequest>(() => new RoomRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRequest(RoomRequest other) : this() {
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomRequest Clone() {
      return new RoomRequest(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomRequest other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Room : pb::IMessage<Room> {
    private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Room> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room(Room other) : this() {
      key_ = other.key_;
      hostId_ = other.hostId_;
      duelerId_ = other.duelerId_;
      status_ = other.status_;
      round_ = other.round_;
      cell_ = other.cell_;
      cellStatus_ = other.cellStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Room Clone() {
      return new Room(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_id" field.</summary>
    public const int HostIdFieldNumber = 2;
    private string hostId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostId {
      get { return hostId_; }
      set {
        hostId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dueler_id" field.</summary>
    public const int DuelerIdFieldNumber = 3;
    private string duelerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DuelerId {
      get { return duelerId_; }
      set {
        duelerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::PlayCli.ProtoMod.Status status_ = global::PlayCli.ProtoMod.Status.OnStart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PlayCli.ProtoMod.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 5;
    private int round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "cell" field.</summary>
    public const int CellFieldNumber = 6;
    private int cell_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cell {
      get { return cell_; }
      set {
        cell_ = value;
      }
    }

    /// <summary>Field number for the "cell_status" field.</summary>
    public const int CellStatusFieldNumber = 7;
    private static readonly pb::FieldCodec<global::PlayCli.ProtoMod.CellStatus> _repeated_cellStatus_codec
        = pb::FieldCodec.ForMessage(58, global::PlayCli.ProtoMod.CellStatus.Parser);
    private readonly pbc::RepeatedField<global::PlayCli.ProtoMod.CellStatus> cellStatus_ = new pbc::RepeatedField<global::PlayCli.ProtoMod.CellStatus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PlayCli.ProtoMod.CellStatus> CellStatus {
      get { return cellStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Room);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Room other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (HostId != other.HostId) return false;
      if (DuelerId != other.DuelerId) return false;
      if (Status != other.Status) return false;
      if (Round != other.Round) return false;
      if (Cell != other.Cell) return false;
      if(!cellStatus_.Equals(other.cellStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (HostId.Length != 0) hash ^= HostId.GetHashCode();
      if (DuelerId.Length != 0) hash ^= DuelerId.GetHashCode();
      if (Status != global::PlayCli.ProtoMod.Status.OnStart) hash ^= Status.GetHashCode();
      if (Round != 0) hash ^= Round.GetHashCode();
      if (Cell != 0) hash ^= Cell.GetHashCode();
      hash ^= cellStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (HostId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HostId);
      }
      if (DuelerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DuelerId);
      }
      if (Status != global::PlayCli.ProtoMod.Status.OnStart) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (Round != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Round);
      }
      if (Cell != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Cell);
      }
      cellStatus_.WriteTo(output, _repeated_cellStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (HostId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostId);
      }
      if (DuelerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DuelerId);
      }
      if (Status != global::PlayCli.ProtoMod.Status.OnStart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Round != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Round);
      }
      if (Cell != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cell);
      }
      size += cellStatus_.CalculateSize(_repeated_cellStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Room other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.HostId.Length != 0) {
        HostId = other.HostId;
      }
      if (other.DuelerId.Length != 0) {
        DuelerId = other.DuelerId;
      }
      if (other.Status != global::PlayCli.ProtoMod.Status.OnStart) {
        Status = other.Status;
      }
      if (other.Round != 0) {
        Round = other.Round;
      }
      if (other.Cell != 0) {
        Cell = other.Cell;
      }
      cellStatus_.Add(other.cellStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            HostId = input.ReadString();
            break;
          }
          case 26: {
            DuelerId = input.ReadString();
            break;
          }
          case 32: {
            Status = (global::PlayCli.ProtoMod.Status) input.ReadEnum();
            break;
          }
          case 40: {
            Round = input.ReadInt32();
            break;
          }
          case 48: {
            Cell = input.ReadInt32();
            break;
          }
          case 58: {
            cellStatus_.AddEntriesFrom(input, _repeated_cellStatus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CellStatus : pb::IMessage<CellStatus> {
    private static readonly pb::MessageParser<CellStatus> _parser = new pb::MessageParser<CellStatus>(() => new CellStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CellStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatus(CellStatus other) : this() {
      key_ = other.key_;
      turn_ = other.turn_;
      cellNum_ = other.cellNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CellStatus Clone() {
      return new CellStatus(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "turn" field.</summary>
    public const int TurnFieldNumber = 2;
    private int turn_;
    /// <summary>
    /// turn 1 = host / -1 = duel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Turn {
      get { return turn_; }
      set {
        turn_ = value;
      }
    }

    /// <summary>Field number for the "cell_num" field.</summary>
    public const int CellNumFieldNumber = 3;
    private int cellNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CellNum {
      get { return cellNum_; }
      set {
        cellNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CellStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CellStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Turn != other.Turn) return false;
      if (CellNum != other.CellNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Turn != 0) hash ^= Turn.GetHashCode();
      if (CellNum != 0) hash ^= CellNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Turn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Turn);
      }
      if (CellNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CellNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Turn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Turn);
      }
      if (CellNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CellStatus other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Turn != 0) {
        Turn = other.Turn;
      }
      if (other.CellNum != 0) {
        CellNum = other.CellNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Turn = input.ReadInt32();
            break;
          }
          case 24: {
            CellNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateCredReq : pb::IMessage<CreateCredReq> {
    private static readonly pb::MessageParser<CreateCredReq> _parser = new pb::MessageParser<CreateCredReq>(() => new CreateCredReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCredReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCredReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCredReq(CreateCredReq other) : this() {
      ip_ = other.ip_;
      username_ = other.username_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCredReq Clone() {
      return new CreateCredReq(this);
    }

    /// <summary>Field number for the "Ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCredReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCredReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCredReq other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Cred : pb::IMessage<Cred> {
    private static readonly pb::MessageParser<Cred> _parser = new pb::MessageParser<Cred>(() => new Cred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PlayCli.ProtoMod.GameCtlReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cred(Cred other) : this() {
      file_ = other.file_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cred Clone() {
      return new Cred(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cred other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
